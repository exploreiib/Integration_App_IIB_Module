/*****************************************************************************************
Table : EAI_AUDIT_TRAIL

 
Column                         Type      Type
name                           schema    name               Length   Scale Nulls

------------------------------ --------- ------------------ -------- ----- ------
COUNTER                        SYSIBM    BIGINT                   10     0 No

MSG_MQMD_MSGID                 SYSIBM    CHARACTER                48     0 No

MSG_IN_DATE                    SYSIBM    CHARACTER               7~11    0 Yes

MSG_OUT_DATE                   SYSIBM    CHARACTER               7~11    0 Yes

SRCE_APPL                      SYSIBM    CHARACTER                 4     0 Yes

MSG_DATA                       SYSIBM    VARCHAR          		4000     0 Yes -- change according oracle needs (varchar2)

******************************************************************************************/
------------------------------------------------
-- DDL Statements for table "WMBAUDIT"."EAI_AUDIT_TRAIL"
------------------------------------------------
--CREATE TABLE WMBAUDIT.EAI_AUDIT_TRAIL
--(
--  COUNTER         CHAR(10 BYTE),
--  MSG_MQMD_MSGID  CHAR(48 BYTE),
--  MSG_IN_DATE     TIMESTAMP,
--  MSG_OUT_DATE    TIMESTAMP,
--  SRCE_APPL       CHAR(4 BYTE),
--  MSG_DATA        VARCHAR2(4000 BYTE)
--)TABLESPACE WMBAUDIT_DATA_TS;
CREATE COMPUTE MODULE MF_CMS_BRK_AuditTrail_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE iMsgBodyLength INTEGER;

		DECLARE cCounter CHARACTER 'DEFAULT';
		DECLARE cSourceApp CHARACTER;
		DECLARE cAuditType CHARACTER;
		DECLARE cAuditFilter CHARACTER;
		DECLARE cMsgId CHARACTER;
		DECLARE bWMBAuditBody BLOB;
		DECLARE cWMBAuditBody CHARACTER;
		DECLARE cInTimestamp CHARACTER;
		DECLARE sSQLInsert CHARACTER;
		DECLARE msgInDate DATE;
		DECLARE msgInTime TIME;
		
		SET msgInDate = CAST (InputRoot.MQMD.PutDate AS DATE);
		SET msgInTime = CAST (InputRoot.MQMD.PutTime AS TIME);
		SET cInTimestamp = 'TO_TIMESTAMP(''' || SUBSTRING ( CAST ( msgInDate AS CHARACTER ) FROM 7 FOR 10 ) || 
							' ' || SUBSTRING ( CAST ( msgInTime AS CHARACTER) FROM 7 FOR 12 ) || ''', ' ||
							'''YYYY-MM-DD HH24:MI:SS.FF'')';
		
		SET cSourceApp = Environment.AUDIT.SRCE_APPL;
		SET cAuditType = Environment.AUDIT.AUDIT_TYPE;
		SET cAuditFilter = Environment.AUDIT.AUDIT_FILTER;
		SET cMsgId = Environment.AUDIT.MsgId;
		SET bWMBAuditBody = BITSTREAM (InputBody);
		
		SET iMsgBodyLength = LENGTH(bWMBAuditBody);
		IF iMsgBodyLength > 4000 THEN
			SET bWMBAuditBody = SUBSTRING(bWMBAuditBody FROM 1 FOR 4000);
		END IF;
		
		SET cWMBAuditBody = CAST(bWMBAuditBody AS CHAR CCSID InputRoot.Properties.CodedCharSetId);
		
 		SET sSQLInsert = 'INSERT INTO WMBAUDIT.EAI_AUDIT_TRAIL ( COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_OUT_DATE, SRCE_APP_NAME, AUDIT_TYPE, AUDIT_FILTER, MSG_DATA ) VALUES ( ''' || cCounter || ''' , ''' || cMsgId || ''', ';
		SET sSQLInsert = sSQLInsert || cInTimestamp || ', ' ;
		SET sSQLInsert = sSQLInsert || 'SYSTIMESTAMP' || ', ' ;
		SET	sSQLInsert = sSQLInsert || '''' || cSourceApp || ''', ';
		SET	sSQLInsert = sSQLInsert || '''' || cAuditType || ''', ';
		SET	sSQLInsert = sSQLInsert || '''' || cAuditFilter || ''', ';
		SET sSQLInsert = sSQLInsert || '''' || cWMBAuditBody || ''')';
	
		PASSTHRU(sSQLInsert);
		
		SET Environment.AUDIT = NULL;
		
		RETURN TRUE;
	END;

END MODULE;

CREATE COMPUTE MODULE MF_CMS_BRK_AuditTrail_InMsg_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE envRef REFERENCE TO Environment ;
		DECLARE msgbody BLOB;
		DECLARE castmsgbody CHARACTER; -- add on to support SoapAuditId
		DECLARE SoapAuditIdTag CHARACTER 'SoapAuditId'; -- add on to support SoapAuditId
		DECLARE AuditTypeTag CHARACTER 'AUDIT_TYPE'; -- add on to support AuditType
		DECLARE SRCE_APPLTag CHARACTER 'SRCE_APPL'; -- add on to support log messageflow
		DECLARE AUDIT_FILTERTag CHARACTER 'AUDIT_FILTER';
		DECLARE S CHARACTER 'AUDIT_TYPE';
		DECLARE SoapAuditIdValue CHARACTER;
		DECLARE iMsgBodyLength INT;
		
		
		DECLARE msgMqmdMsgid CHARACTER;
		DECLARE msgInDate DATE;
		DECLARE msgInTime TIME;
--		DECLARE msgOutDate DATE;
--		DECLARE msgOutTime TIME;
		DECLARE sourceApp CHARACTER;
		DECLARE cAuditType CHARACTER;
		DECLARE cAuditFilter CHARACTER;
		
		DECLARE cInTimestamp CHARACTER;
		
		SET envRef.Variable.COUNTER='DEFAULT';
		SET envRef.Variable.MSG_MQMD_MSGID = SUBSTRING ( CAST ( InputRoot.MQMD.MsgId AS CHARACTER ) FROM 3 FOR 48 );

		---------------------------- Get data -------------------------
	

		IF FIELDNAME( InputRoot.*[<] ) = 'BLOB' THEN
			SET msgbody = InputRoot."BLOB"."BLOB";
		ELSE
			SET msgbody = BITSTREAM ( InputBody );
		END IF;
		
		SET iMsgBodyLength = LENGTH(msgbody);
		
		IF ( iMsgBodyLength > 4000 ) THEN
			SET msgbody = SUBSTRING ( msgbody FROM 1 FOR 4000 );
		END IF;
		
		SET castmsgbody = CAST(msgbody AS CHAR CCSID InputRoot.Properties.CodedCharSetId) || ''')';
		
		-- Add on the cater SOAP FLOW in WMBv6.1
		IF(isAuditIdExist(castmsgbody, SoapAuditIdTag, SoapAuditIdValue) IS TRUE) THEN
			SET envRef.Variable.MSG_MQMD_MSGID = SoapAuditIdValue; -- Overwrite the mqmq msg id to become SoapAuditId
			-- SET castmsgbody = removeElement(castmsgbody, SoapAuditIdTag); -- remove the SoapAuditId Tag from msgBody
		END IF;
		
		SET msgMqmdMsgid = SUBSTRING ( CAST ( InputRoot.MQMD.MsgId AS CHARACTER ) FROM 3 FOR 48 );
		SET msgInDate = CAST (InputRoot.MQMD.PutDate AS DATE);
		SET msgInTime = CAST (InputRoot.MQMD.PutTime AS TIME);
		SET cInTimestamp = 'TO_TIMESTAMP(''' || SUBSTRING ( CAST ( msgInDate AS CHARACTER ) FROM 7 FOR 10 ) || 
						' ' || SUBSTRING ( CAST ( msgInTime AS CHARACTER) FROM 7 FOR 12 ) || ''', ' ||
						'''YYYY-MM-DD HH24:MI:SS.FF'')';
		
		--SET msgOutDate = SUBSTRING ( CAST ( CURRENT_DATE AS CHARACTER ) FROM 7 FOR 10 );
		--SET msgOutTime = SUBSTRING ( CAST ( CURRENT_TIME AS CHARACTER ) FROM 7 FOR 8 );  
		--SET sourceApp = SUBSTRING( CAST ( InputRoot.MQMD.SourceQueue AS CHARACTER ) FROM 4 FOR 4 );
		SET sourceApp = getParameter(castmsgbody, SRCE_APPLTag);
		SET cAuditType = getParameter(castmsgbody, AuditTypeTag);
		SET cAuditFilter = getParameter(castmsgbody, AUDIT_FILTERTag);
		
		-- COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_IN_TIME, MSG_OUT_DATE, MSG_OUT_TIME, SRCE_APPL, MSG_DATA
		
 		--SET envRef.Variable.sqlQuery = 'INSERT INTO WMBAUDIT.EAI_AUDIT_TRAIL ( COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_IN_TIME, MSG_OUT_DATE, MSG_OUT_TIME, SRCE_APPL, MSG_DATA ) VALUES ( ''' || envRef.Variable.COUNTER || ''' , ''' || envRef.Variable.MSG_MQMD_MSGID || ''', ';
 		SET envRef.Variable.sqlQuery = 'INSERT INTO WMBAUDIT.EAI_AUDIT_TRAIL ( COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_OUT_DATE, SRCE_APPL, AUDIT_TYPE, FILTER, MSG_DATA ) VALUES ( ''' || envRef.Variable.COUNTER || ''' , ''' || envRef.Variable.MSG_MQMD_MSGID || ''', ';
		
		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || cInTimestamp || ', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( InputRoot.MQMD.PutDate AS CHARACTER ) FROM 7 FOR 10 ) || ''', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( msgInTime AS CHARACTER) FROM 7 FOR 12 ) || ''', ' ;	

		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || 'SYSTIMESTAMP' || ', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( CURRENT_DATE AS CHARACTER ) FROM 7 FOR 10 ) || ''', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( CURRENT_TIME AS CHARACTER ) FROM 7 FOR 12 ) || ''', ' ;	

		SET	envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || sourceApp || ''', ';
		
		SET	envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || cAuditType || ''', ';
		
		SET	envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || cAuditFilter || ''', ';
		
		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || castmsgbody;
	
		PASSTHRU(envRef.Variable.sqlQuery);

		-- Make sure to delete all the child below envRef.Variable.Variable - to avoid memory fragmentation
		SET envRef.Variable.ORIGINAL_DATA = NULL ;
		SET envRef.Variable = NULL ; 

		RETURN TRUE;
	END;

END MODULE;

CREATE FUNCTION isAuditIdExist(IN msgbody CHAR, IN tag CHAR, OUT value CHAR) RETURNS BOOLEAN
BEGIN
	
	DECLARE blnExist BOOLEAN false;
	DECLARE paramValue CHARACTER;
	
	SET paramValue = getParameter(msgbody, tag);
	IF(paramValue <> '') THEN
		SET paramValue = TRIM(' ' FROM paramValue);
		--IF(paramValue <> '') THEN
			SET blnExist = true;
			SET value = paramValue;
		--END IF;
	END IF;
	
	RETURN blnExist;
END;

CREATE COMPUTE MODULE MF_CMS_BRK_AuditTrail_OutMsg_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		DECLARE envRef REFERENCE TO Environment;
		DECLARE msgbody BLOB;
		DECLARE iMsgBodyLength INT;
		DECLARE castmsgbody CHARACTER; -- add on to support SoapAuditId
		DECLARE SoapAuditIdTag CHARACTER 'SoapAuditId'; -- add on to support SoapAuditId
		DECLARE SoapAuditIdValue CHARACTER;
		
		DECLARE msgMqmdMsgid CHARACTER;
		DECLARE msgInDate DATE;
		DECLARE msgInTime TIME;
--		DECLARE msgOutDate CHARACTER;
--		DECLARE msgOutTime TIME;
		DECLARE sourceApp CHARACTER;
		
		DECLARE cInTimestamp CHARACTER;
		
		SET envRef.Variable.COUNTER='DEFAULT';
		SET envRef.Variable.MSG_MQMD_MSGID = SUBSTRING ( CAST ( InputRoot.MQMD.MsgId AS CHARACTER ) FROM 3 FOR 48 );

		---------------------------- Get data -------------------------
	

		IF FIELDNAME( InputRoot.*[<] ) = 'BLOB' THEN
			SET msgbody = InputRoot."BLOB"."BLOB";
		ELSE
			SET msgbody = BITSTREAM ( InputBody );
		END IF;
		
		SET iMsgBodyLength = LENGTH(msgbody);
		
		IF ( iMsgBodyLength > 4000 ) THEN
			SET msgbody = SUBSTRING ( msgbody FROM 1 FOR 4000 );
		END IF;
		
		SET castmsgbody = CAST(msgbody AS CHAR CCSID InputRoot.Properties.CodedCharSetId) || ''')';
		
		-- Add on the cater SOAP FLOW in WMBv6.1
		IF(isAuditIdExist(castmsgbody, SoapAuditIdTag, SoapAuditIdValue) IS TRUE) THEN
			SET envRef.Variable.MSG_MQMD_MSGID = SoapAuditIdValue; -- Overwrite the mqmq msg id to become SoapAuditId
			-- SET castmsgbody = removeElement(castmsgbody, SoapAuditIdTag); -- remove the SoapAuditId Tag from msgBody
		END IF;

		SET msgMqmdMsgid = SUBSTRING ( CAST ( InputRoot.MQMD.MsgId AS CHARACTER ) FROM 3 FOR 48 );
		SET msgInDate = CAST (InputRoot.MQMD.PutDate AS DATE);
		SET msgInTime = CAST (InputRoot.MQMD.PutTime AS TIME);
		SET cInTimestamp = 'TO_TIMESTAMP(''' || SUBSTRING ( CAST ( msgInDate AS CHARACTER ) FROM 7 FOR 10 ) ||
						 	' ' || SUBSTRING ( CAST ( msgInTime AS CHARACTER) FROM 7 FOR 12 ) || ''', ' ||
							'''YYYY-MM-DD HH24:MI:SS.FF'')';
		
		--SET msgOutDate = SUBSTRING ( CAST ( CURRENT_DATE AS CHARACTER ) FROM 7 FOR 10 );
		--SET msgOutTime = SUBSTRING ( CAST ( CURRENT_TIME AS CHARACTER ) FROM 7 FOR 8 );  
		SET sourceApp = SUBSTRING( CAST ( InputRoot.MQMD.SourceQueue AS CHARACTER ) FROM 4 FOR 4 );
		
		-- COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_IN_TIME, MSG_OUT_DATE, MSG_OUT_TIME, SRCE_APPL, MSG_DATA
		
 		--SET envRef.Variable.sqlQuery = 'INSERT INTO WMBAUDIT.EAI_AUDIT_TRAIL ( COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_IN_TIME, MSG_OUT_DATE, MSG_OUT_TIME, SRCE_APPL, MSG_DATA ) VALUES ( ''' || envRef.Variable.COUNTER || ''' , ''' || envRef.Variable.MSG_MQMD_MSGID || ''', ';
 		SET envRef.Variable.sqlQuery = 'INSERT INTO WMBAUDIT.EAI_AUDIT_TRAIL ( COUNTER, MSG_MQMD_MSGID, MSG_IN_DATE, MSG_OUT_DATE, SRCE_APPL, MSG_DATA ) VALUES ( ''' || envRef.Variable.COUNTER || ''' , ''' || envRef.Variable.MSG_MQMD_MSGID || ''', ';
		
		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || cInTimestamp || ', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( InputRoot.MQMD.PutDate AS CHARACTER ) FROM 7 FOR 10 ) || ''', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( msgInTime AS CHARACTER) FROM 7 FOR 12 ) || ''', ' ;	

		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || 'SYSDATE' || ', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( CURRENT_DATE AS CHARACTER ) FROM 7 FOR 10 ) || ''', ' ;
		--SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || SUBSTRING ( CAST ( CURRENT_TIME AS CHARACTER ) FROM 7 FOR 12 ) || ''', ' ;	

		SET	envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || sourceApp || ''', ' ;
		
		SET envRef.Variable.sqlQuery = envRef.Variable.sqlQuery || '''' || castmsgbody;--CAST(msgbody AS CHAR	CCSID InputRoot.Properties.CodedCharSetId) || ''')';
	
		
		PASSTHRU ( envRef.Variable.sqlQuery );

		-- Make sure to delete all the child below envRef.Variable.Variable - to avoid memory fragmentation
		SET envRef.Variable.ORIGINAL_DATA = NULL ;
		SET envRef.Variable = NULL ; 

		RETURN TRUE;
	END;

END MODULE;

